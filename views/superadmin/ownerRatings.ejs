


<%- include ("superheader.ejs") %>
<%- include ("supersidebar.ejs") %>

<meta name="csrf-token" content="<%= csrfToken %>">
      <!-- Sidebar chat end-->
      <div class="content-wrapper">
         <!-- Container-fluid starts -->
         <!-- Main content starts -->
         <div class="container-fluid">
             <div class="row ">
                <div class="col-lg-12">
                    <div class="bread-boxes">
                        <ol class="breadcrumb">
                            <li><a href="/superadmin"> Home </a></li>
                               <!-- <li><a href="#"> / Owner Managements </a></li> -->
                            <li class="active"> / Owner Ratings </li>        
                          </ol>
                    </div>
                </div>
                    
            </div>
<!-- NEW ROW START -->

           <div class="row">
    <div class="col-lg-12">
         <div class="card mb-4" style="border-top:4px solid black;">
                <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                 <a href="#">  <h6 class=" font-weight-bold "><i class="fa fa-arrow-circle-o-left yellow_color"></i> Add Rating </h6> </a>
                 </div>
                    <div class="heads-rights">       
                  </div>
                  </div>
                  <div class="user-form">
                    <form id="kilfrom" method="post" action="/superadmin/ownerRatings">
                        <div class="form-group row users-foarms">
                      
                            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                          <div class="form-group col-md-4">
                            <label for="exampleInputEmail" class="form-control-label"> Start Date</label>
                            <input type="date" name="start_date" class="form-control" id="exampleInputdate" value="<%= start_date || '' %>" required>
                          </div>
                      
                          <div class="form-group col-md-4">
                            <label for="exampleInputEmail" class="form-control-label"> End Date</label>
                            <input type="date" name="end_date" class="form-control" id="exampleInputdate" value="<%= end_date || '' %>" required>
                          </div>
                      
                          <div class="form-group col-md-4">
                            <div class="submit-btns" style="padding-top: 30px;">
                              <button type="submit" onclick="validateForm('#kilfrom')" class="btn btn-primary waves-effect waves-light m-r-30">Send Request</button>
                              <button type="reset" id="resetButton" class="btn btn-info waves-effect waves-light m-r-30">Reset</button>
                            </div>
                          </div>
                        </div>
                      </form>
                      
                   </div>
                   
                 </div>
    </div>
</div>
<!-- row end -->

            <!-- 1-3-block row start -->
            <div class="row">
               <div class="col-lg-12">
                <div class="card mb-4" style="border-top:4px solid black;">
               <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                  <h6 class=" font-weight-bold "> <i class="fa fa-arrow-circle-o-left"></i>  View Owner Ratings </h6>
                 </div>
                    <div class="heads-rights">
                    <!-- <a class="btn btn-success waves-effect waves-light " href="rating_add_Owner.html"><i class="fa fa-user  mr-1"></i> Add Owner   </a> -->
                  </div>
                  </div>
                  <div class="user-form">
                     <div class="table-reponsive box">
                        <div id="example_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">
                          <div class="row">
                            <table id="example" class="table table-striped table-bordered dataTable no-footer" role="grid" aria-describedby="example_info">
                              <thead>
                                  <tr role="row">
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 35.0781px;">Id</th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 50.0781px;">Booking Id</th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 50.0781px;">Vehicle Name</th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Gross: activate to sort column ascending" style="width: 50.922px;">User</th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="5%: activate to sort column ascending" style="width: 50.1719px;">Owner </th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 45.5625px;">Cleanliness</th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 40.5625px;">Convenience</th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 50.5625px;">Communation</th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 40.5625px;">Overall Ratings</th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 50.5625px;">Review</th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 50.5625px;">Date Time</th>
                                    <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Action: activate to sort column ascending" style="width: 80.156px;">Action</th>
                                  </tr>
                              </thead>
                               <div class="table-responsive"></div>
                              <tbody>
                                <% owners.forEach((rating, index)=>{ %>
                                <tr>
                                    <td><%= index + 1 %></td>
                                    <td><%= rating.booking_id %></td>
                                    <td><%= rating.vehicle_name %></td>
                                    <td><%= rating.user_first_name %><%= rating.user_last_name %></td>
                                    <td><%= rating.owner_first_name %><%= rating.owner_last_name %></td>
                                    <td><%= rating.cleanliness %> <i class="fa fa-star" style="color:#ffe600;"></i></td>
                                    <td><%= rating.convenience %><i class="fa fa-star" style="color:#ffe600;"></i></td>
                                    <td><%= rating.communication %><i class="fa fa-star" style="color:#ffe600;"></i></td>
                                    <td><%= rating.overall_rating %><i class="fa fa-star" style="color:#ffe600;"></i></td>
                                    <td><%= rating.review %></td>
                                    <td><%= rating.date %><%= rating.time %></td>
                                    <td>
                                      <a hclass="buttons" href="#popup1<%= rating.rating_id %>"><i class="fa fa-eye icon-1"></i></a>
                                      <!-- <a data-toggle="modal"  href="#edit_personal_details"><i class="fa fa-edit icon-2"></i></a> -->
                                      <a href="javascript:void(0)" onclick="updateRating('<%= rating.rating_id %>', '<%= JSON.stringify(rating) %>')" title="Update">
                                        <i class="fa fa-edit icon-2"></i>
                                      </a>
                                      <!-- <a href="#"><i class="fa fa-trash icon-5"></i></a> -->
                                    </td>
                                </tr>
                                <% }); %>
                              </tbody>
                              </table>
                        </div>
                      </div>
                  </div>
                   </div>
                 </div> 
               </div>
            </div>
            <!-- 1-3-block row end -->

         </div>
         <!-- Main content ends -->
         <!-- Container-fluid ends -->
      </div>
   </div>
<!--  -->
<<!-- VIEW Details Modal POPUP CODE START -->
<% owners.forEach((rating, index)=>{ %>
  <div id="popup1<%= rating.rating_id %>"  class="popup">
    <div class="view-header">
        <a href="#" class="close">&times;</a>
    <h4>View Rating Details</h4>
    </div>
    <p class="view-lists">
        <table class="table">
       <tbody>
                <tr>
                    <td>Rating Id</td>
                    <td><%= rating.rating_id %></td>
                </tr>
                 <tr>
                    <td>User Name</td>
                    <td><%= rating.user_first_name %><%= rating.user_last_name %></td>
                </tr>
                <tr>
                  <td>Owner Name</td>
                  <td><%= rating.owner_first_name %><%= rating.owner_last_name %></td>
              </tr>
              <tr>
                <td>Vehicle Name</td>
                <td><%= rating.vehicle_name %></td>
              </tr>
              <tr>
                <td>Review</td>
                <td> <%= rating.review %></td>
              </tr>
                 <tr>
                    <td>Cleaninless</td>
                    <td><%= rating.cleanliness %><i class="fa fa-star" style="color:#c9b500;"></i></td>
                </tr>
                 <tr>
                    <td>Convenience</td>
                     <td><%= rating.convenience %><i class="fa fa-star" style="color:#c9b500;"></i></td>
                </tr>
                  <tr>
                    <td>Communication</td>
                     <td><%= rating.communication %><i class="fa fa-star" style="color:#c9b500;"></i></td>
                </tr>
  
                  <tr>
                    <td>Overall Rating</td>
                     <td><%= rating.overall_rating %><i class="fa fa-star" style="color:#c9b500;"></i></td>
                </tr>
       </tbody>
        </table>
         <!-- <button type="submit" class="btn btn-primary pt-2 pb-2 btn-block">Save Changes</button> -->
    </p>
  </div>
  <a href="#" class="close-popup"></a>
  
  <% }) %>
  <!-- VIEW BUTTON POPUP CSS SSTART  -->
  <!-- Edit Details ModalPOPUP CODE START -->
  <script>
  function updateRating(rating_id, rating) {
    rating = JSON.parse(rating);
    console.log("rating--->",rating)
  
    // Create the form structure for editing inside SweetAlert
    const htmlForm = `
        <div style="position: relative;">
            <!-- Close (X) Button -->
            <button type="button" class="swal2-close" onclick="Swal.close()" aria-label="Close" style="position: absolute; top: -10px; right: -10px; background: transparent; border: none; font-size: 24px; cursor: pointer;">&times;</button>
        </div>
        <form id="kileditfrom" action="/superadmin/updateOwnerRating?_csrf=<%= csrfToken %>" method="POST" >
            <input type="hidden" name="rating_id" value="${rating_id}">   
            <div class="form-group" style="text-align: left;">
                 <label>User Name</label>
                 <input onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" type="text" name="first_name" class="form-control" value="${rating.user_first_name }${rating.user_last_name}"  placeholder="Enter First Name" readonly required>
            </div>
  
            <div class="form-group" style="text-align: left;">
                <label>Owner Name</label>
                 <input onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" type="text" name="last_name"  class="form-control" value="${rating.owner_first_name }${rating.owner_last_name}"  placeholder="Enter Last Name" readonly  required>
            </div>
  
             <div class="form-group" style="text-align: left;">
                <label>Cleanliness</label>
                <input type="number" name="cleanliness" class="form-control" id="emailInput" placeholder="Cleanliness" value="${rating.cleanliness}"  required>
                <div id="kilErrorupdate" style="color: red;"></div>
            </div>
             <div class="form-group" style="text-align: left;">
                <label>Convenience</label>
                <input type="number" name="convenience" class="form-control" id="emailInput" placeholder="Convenience" value="${rating.convenience}"  required>
                <div id="kilErrorupdate" style="color: red;"></div>
            </div>
  
            <div class="form-group" style="text-align: left;">
                <label>Communication</label>
                <input type="number" name="communication" class="form-control" id="emailInput" placeholder="Communication" value="${rating.communication}"  required>
                <div id="kilErrorupdate" style="color: red;"></div>
            </div>
  
            <div class="form-group" style="text-align: left;">
                <label>Overall Rating</label>
                <input type="number" name="overall_rating" class="form-control" id="emailInput" placeholder="Overall Rating" value="${rating.overall_rating}"  required>
                <div id="kilErrorupdate" style="color: red;"></div>
            </div>
  
            <div class="form-group" style="text-align: left;">
                <label>Review</label>
                <input type="text" name="review" class="form-control" id="emailInput" placeholder="Review" value="${rating.review}"  required>
                <div id="kilErrorupdate" style="color: red;"></div>
            </div>
  
            <div style="display: flex; justify-content: space-between;">
                <button type="button" class="btn btn-secondary" onclick="Swal.close()">Cancel</button>
                <button type="submit" onclick="validateForm('#kileditfrom')" class="btn btn-success">Update</button>
            </div>
        </form>
    `;
  
     // Open SweetAlert with the form
     Swal.fire({
          title: `<span style="font-size: 16px;">Update Rating : </span>`,
          html: htmlForm,
          showConfirmButton: false, // Disable default SweetAlert buttons, use form's submit buttons instead
          focusCancel: true,
          customClass: {
              popup: 'my-popup-class' // Add a custom class for the popup
          },
          allowOutsideClick: false, // Disable closing by clicking outside
          didOpen: () => {
              // Now initialize intlTelInput when the modal has fully opened
              var input = document.querySelector("#kilvishcontact");
              var savedCountryCode = user.country_code || '';  // Use saved country code from user data
              var savedPhoneNumber = user.contact || '';  // Use saved phone number from user data
  
              var iti = window.intlTelInput(input, {
                  preferredCountries: ["hk", "cn"], // Customize based on your needs
                  separateDialCode: true,
                  initialCountry: "auto",
                  geoIpLookup: function(success, failure) {
                      fetch('https://ipinfo.io/json', {cache: 'reload'}).then(resp => resp.json()).then(resp => {
                          var countryCode = (resp && resp.country) ? resp.country : "hk";
                          success(countryCode);
                      }).catch(() => success("hk"));
                  },
                  utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js", // Utility script
              });
  
              if (savedCountryCode && savedPhoneNumber) {
                  // Combine country code and phone number if available
                  iti.setNumber(savedCountryCode + savedPhoneNumber);
              }
  
              // Update hidden input field with full phone number
              input.addEventListener("input", function() {
                  var fullPhoneNumber = iti.getNumber();
                  var countryCode = '+' + iti.getSelectedCountryData().dialCode;
                  document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
                  document.querySelector("#country_code").value = countryCode;
              });
  
              input.addEventListener("countrychange", function() {
                  var fullPhoneNumber = iti.getNumber();
                  var countryCode = '+' + iti.getSelectedCountryData().dialCode;
                  document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
                  document.querySelector("#country_code").value = countryCode;
              });
  
              // Initialize hidden field with the current value on page load
              var fullPhoneNumber = iti.getNumber();
              var countryCode = '+' + iti.getSelectedCountryData().dialCode;
              document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
              document.querySelector("#country_code").value = countryCode;
          }
      });
  
      // Add real-time validation for inputs (reuse the existing validation)
      addRealTimeValidation('#kileditfrom'); // Ensure real-time validation works with the new modal form
  }
  </script>
  
   <!-- /Edit Details Modal -->
 <%- include ("superfooter.ejs") %>


 <script>
  //-------------- Comman Kilvish Function for input validation start ---------------------
     
     function validateRequiredFields(kil) {
  
         const form = document.querySelector(`${kil}`); 
         const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); // Get only required inputs
         let isValid = true;
     
         
     
         // Remove previous error messages and borders
         form.querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
         inputs.forEach(input => {
             input.style.border = ''; // Reset borders
         });
     
         inputs.forEach(input => {
             if (!input.value.trim()) {  // If the required field is empty
                 isValid = false;
                 input.style.border = '2px solid red'; // Set border to red for empty required fields
                 addErrorMessage(input.parentNode, "This Field is Required."); // Add error message
             }
         });
     
         return isValid;
     }
  
     // Add real-time validation for each required field
  function addRealTimeValidation(kil) {
      const form = document.querySelector(`${kil}`); 
      const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
  
      inputs.forEach(input => {
          // Listen for 'input' and 'change' events on required fields
          input.addEventListener('input', function () {
              if (input.value.trim()) {
                  // If the input is filled, remove red border and error message
                  input.style.border = '';
                  const errorMessage = input.parentNode.querySelector('.error-message');
                  if (errorMessage) {
                      errorMessage.remove();
                  }
              }
          });
          input.addEventListener('change', function () {
              if (input.value.trim()) {
                  // For select fields, check if an option is selected
                  input.style.border = '';
                  const errorMessage = input.parentNode.querySelector('.error-message');
                  if (errorMessage) {
                      errorMessage.remove();
                  }
              }
          });
      });
  }
  
  // Combined validation function
  function validateForm(kil) {
     
        if(!validateRequiredFields(kil)){
           event.preventDefault();
        }
     }
  
     // Add real-time validation once the document is loaded
  document.addEventListener('DOMContentLoaded', () => {
      addRealTimeValidation('#kilfrom');  // Activate real-time validation
  });
     
     
  function validateKilvishInput(event) 
  {
         const inputField = event.target;
     
         // General valid character sets
         // let validCharacters = /^[a-zA-Z0-9@,._\s-]*$/;
     
         let validCharacters = /^[a-zA-Z\s]*$/; // only char, no special char no numbers 
  
         // Use parentNode for regular inputs, container for checkboxes
         const container = inputField.closest('.col-lg-12') || inputField.closest('.form-group') || inputField.closest('div');
         const inputParent = inputField.parentNode;
     
         // Remove previous error message and border
         let errorMessage = inputParent.querySelector('.error-message');
         if (errorMessage) errorMessage.remove();
         inputField.style.border = ''; // Reset border
     
         // Custom validations based on input name
        if (inputField.name === 'start_date' || inputField.name === 'end_date' ) 
        {
           validCharacters = /^(?:\d{4}[-\/]\d{2}[-\/]\d{2})$/; 
           const inputValue = inputField.value.trim();
           const inputDate = new Date(inputValue.replace(/[-\/]/g, '/'));
           const today = new Date();
           today.setHours(0, 0, 0, 0); // Set to midnight for comparison
  
                          // Check if the date is in the past
           if (inputDate < today) {
              addErrorMessage(inputParent, 'The date cannot be in the past.');
              inputField.style.border = '2px solid red';
              
              if (event.type === 'change') {
                    inputField.value = ''; // Clear the input field on change
              }
              
              return; // Exit the function after handling the error
           }
           inputField.style.border = '';
        }
           
  }
     
     // Function to display error messages under the input field or container for checkboxes
     function addErrorMessage(parent, message)
     {
         if (!parent.querySelector('.error-message')) {
             const errorMessage = document.createElement('div');
             errorMessage.className = 'error-message';
             errorMessage.style.color = 'red';
             errorMessage.style.fontSize = '12px';
             errorMessage.innerText = message;
             parent.appendChild(errorMessage);
         }
     }
  
  </script>

<script>
    document.getElementById('resetButton').addEventListener('click', function () {
        // Reset the form data
        document.getElementById('kilfrom').reset();

        // Redirect to the specific URL to refresh
        window.location.href = '/superadmin/ownerRatings';
    });
</script>

