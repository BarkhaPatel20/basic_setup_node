<%- include ("superheader.ejs") %>
<%- include ("supersidebar.ejs") %>

      <!-- Sidebar chat end-->
      <div class="content-wrapper">
         <!-- Container-fluid starts -->
         <!-- Main content starts -->
         <div class="container-fluid">
             <div class="row ">
                <div class="col-lg-12">
                    <div class="bread-boxes">
                        <ol class="breadcrumb">
                            <li><a href="/superadmin"> Home </a></li>
                               <!-- <li><a href="#"> / Owner Managements </a></li> -->
                            <li class="active"> / User Ratings </li>        
                          </ol>
                    </div>
                </div> 
            </div>

<div class="row">
    <div class="col-lg-12">
         <div class="card mb-4" style="border-top:4px solid black;">
                <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                 <a href="#">  <h6 class=" font-weight-bold "><i class="fa fa-arrow-circle-o-left yellow_color"></i> Add Rating </h6> </a>
                 </div>
                    <div class="heads-rights">       
                  </div>
                  </div>
                  <div class="user-form">
                    <form id="kilfrom">
                      <!-- <form id="kilfrom" method="post" action="/superadmin/pending" > -->
                         <div class="form-group row users-foarms">
 
                            <div class="form-group col-md-4">
                               <!-- <i class="fa fa-bandcamp icon-set"></i> -->
                               <label for="exampleInputEmail" class="form-control-label"> Start Date</label>
                           <input type="date"  onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" name="start_date" class="form-control" id="exampleInputdate" placeholder="Enter Add Referral By Amount" required>
                            </div>
    
                             <div class="form-group col-md-4">
                               <!-- <i class="fa fa-bandcamp icon-set"></i> -->
                               <label for="exampleInputEmail" class="form-control-label"> End Date</label>
                           <input type="date"  onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" name="end_date" class="form-control" id="exampleInputdate" placeholder="Enter Add Referral By Amount" required>
                            </div>
 
                            <div class="form-group col-md-4">
                               <div class="submit-btns" style="padding-top: 30px;">
                                     <button type="submit" onclick="validateForm('#kilfrom')"  class="btn btn-primary waves-effect waves-light m-r-30">Send Request</button>
                                     <button type="reset"  class="btn btn-info waves-effect waves-light m-r-30">Reset</button>
                               </div>
                            </div>
                         </div>
                      </form>
                   </div>
                   
                 </div>
    </div>
</div>
<!-- row end -->
            <!-- 1-3-block row start -->
            <div class="row">
               <div class="col-lg-12">
      <!--  -->
                <div class="card mb-4" style="border-top:4px solid black;">
               <div class="cards-headers py-3 px-3 d-flex flex-row align-items-center justify-content-between">
                     <div class="heads-lefts">
                  <h6 class=" font-weight-bold "> <i class="fa fa-arrow-circle-o-left"></i>  View User Ratings </h6>
                 </div>
                    <div class="heads-rights">
                    <!-- <a class="btn btn-success waves-effect waves-light " href="rating_add_rating.html"><i class="fa fa-user  mr-1"></i> Add Rating  </a> -->
                  </div>
                  </div>
                  <div class="user-form">
                     <div class="table-reponsive box">
                        <div id="example_wrapper" class="dataTables_wrapper dt-bootstrap4 no-footer">
                          <div class="row">
                          <table id="example" class="table table-striped table-bordered dataTable no-footer" role="grid" aria-describedby="example_info">
                            <thead>
                                <tr role="row">
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 35.0781px;">Id</th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 50.0781px;">Booking Id</th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Day: activate to sort column ascending" style="width: 50.0781px;">Vehicle Name</th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Gross: activate to sort column ascending" style="width: 50.922px;">User</th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="5%: activate to sort column ascending" style="width: 50.1719px;">Owner </th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 45.5625px;">Cleanliness</th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 40.5625px;">Convenience</th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 50.5625px;">Communation</th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 40.5625px;">Overall Ratings</th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 50.5625px;">Review</th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Net: activate to sort column ascending" style="width: 50.5625px;">Date Time</th>
                                  <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" aria-label="Action: activate to sort column ascending" style="width: 80.156px;">Action</th>
                                </tr>
                            </thead>
                             <div class="table-responsive"></div>
                            <tbody>
                              <% users.forEach((rating, index)=>{ %>
                              <tr>
                                  <td><%= index + 1 %></td>
                                  <td><%= rating.booking_id %></td>
                                  <td><%= rating.vehicle_name %></td>
                                  <td><%= rating.user_first_name %><%= rating.user_last_name %></td>
                                  <td><%= rating.owner_first_name %><%= rating.owner_last_name %></td>
                                  <td><%= rating.cleanliness %> <i class="fa fa-star" style="color:#ffe600;"></i></td>
                                  <td><%= rating.convenience %><i class="fa fa-star" style="color:#ffe600;"></i></td>
                                  <td><%= rating.communication %><i class="fa fa-star" style="color:#ffe600;"></i></td>
                                  <td><%= rating.overall_rating %><i class="fa fa-star" style="color:#ffe600;"></i></td>
                                  <td><%= rating.review %></td>
                                  <td><%= rating.date %><%= rating.time %></td>
                                  <!-- <td>
                                    <a class="buttons" href="#popup1<%= rating.rating_id %>"> <i class="fa fa-eye icon-1"></i></a>
                                  
                                    <a data-toggle="modal"  href="#edit_personal_details"><i class="fa fa-edit icon-2"></i></a>
                                    <a href="javascript:void(0)" onclick="updateRating('<%= rating.rating_id %>')" title="Update">
                                      <i class="fa fa-edit icon-2"></i>
                                    </a>
                                   <a href="#"><i class="fa fa-trash icon-5"></i></a>
                                  </td> -->
                                  <td>
                                    <a class="buttons" href="#popup<%= rating.rating %>"><i class="fa fa-eye icon-1"></i></a>
                                    <!-- <a href="#popup<%= rating.rating_id %>" class="btn-view-popup">
                                      <i class="fa fa-eye"></i>
                                    </a> -->
                                    <a href="javascript:void(0)" onclick="updateRating('<%= rating.rating_id %>', '<%= JSON.stringify(rating) %>')" class="btn-update">
                                      <i class="fa fa-edit"></i>
                                    </a>
                                  </td>
                              </tr>
                              <% }); %>
                            </tbody>
                            </table>
                        </div>
                      </div>
                  </div>
                   </div>
                 </div> 
               </div>
            </div>
            <!-- 1-3-block row end -->

   
         </div>
         <!-- Main content ends -->
         <!-- Container-fluid ends -->
      </div>
   </div>
<!--  -->
<!-- VIEW Details Modal POPUP CODE START -->
<!-- Popup Modal -->
<% users.forEach((rating) => { %>
  <div id="popup<%= rating.rating_id %>" class="popup">
    <div class="view-header">
      <button class="close" onclick="closePopup('<%= rating.rating_id %>')">&times;</button>
      <h4>View Details</h4>
    </div>
    <p class="view-lists">
      <table class="table">
        <tbody>
          <tr>
            <td>Rating ID</td>
            <td><%= rating.rating_id %></td>
          </tr>
          <tr>
            <td>Booking ID</td>
            <td><%= rating.booking_id %></td>
          </tr>
          <tr>
            <td>Vehicle Name</td>
            <td><%= rating.vehicle_name %></td>
          </tr>
          <tr>
            <td>User</td>
            <td><%= rating.user_first_name %> <%= rating.user_last_name %></td>
          </tr>
          <tr>
            <td>Review</td>
            <td><%= rating.review %></td>
          </tr>
        </tbody>
      </table>
    </p>
  </div>
  <a href="#" class="close-popup"></a>
  <% }) %>
  
  <script>
    // Close Popup
    function closePopup(id) {
      document.getElementById(`popup${id}`).classList.remove('active');
    }
<!-- VIEW BUTTON POPUP CSS SSTART  -->
</script>
<!-- Edit Details ModalPOPUP CODE START -->
<script>


function updateRating(rating_id, rating) {
  rating = JSON.parse(rating);

  // Create the form structure for editing inside SweetAlert
  const htmlForm = `
      <div style="position: relative;">
          <!-- Close (X) Button -->
          <button type="button" class="swal2-close" onclick="Swal.close()" aria-label="Close" style="position: absolute; top: -10px; right: -10px; background: transparent; border: none; font-size: 24px; cursor: pointer;">&times;</button>
      </div>
      <form id="kileditfrom" action="/superadmin/updateUserRating" method="POST" enctype="multipart/form-data">
          <input type="hidden" name="rating_id" value="${rating_id}">   
          <div class="form-group" style="text-align: left;">
               <label>User Name</label>
               <input onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" type="text" name="first_name" class="form-control" value="${rating.user_first_name }${rating.user_last_name}"  placeholder="Enter First Name" readonly required>
          </div>

          <div class="form-group" style="text-align: left;">
              <label>Owner Name</label>
               <input onkeyup="validateKilvishInput(event)" onchange="validateKilvishInput(event)" type="text" name="last_name"  class="form-control" value="${rating.owner_first_name }${rating.owner_last_name}"  placeholder="Enter Last Name" readonly  required>
          </div>

           <div class="form-group" style="text-align: left;">
              <label>Cleanliness</label>
              <input type="number" name="Cleanliness" class="form-control" id="emailInput" placeholder="Cleanliness" value="${rating.cleanliness}"  required>
              <div id="kilErrorupdate" style="color: red;"></div>
          </div>
           <div class="form-group" style="text-align: left;">
              <label>Convenience</label>
              <input type="number" name="convenience" class="form-control" id="emailInput" placeholder="Convenience" value="${rating.convenience}"  required>
              <div id="kilErrorupdate" style="color: red;"></div>
          </div>

          <div class="form-group" style="text-align: left;">
              <label>Communication</label>
              <input type="number" name="communication" class="form-control" id="emailInput" placeholder="Communication" value="${rating.communication}"  required>
              <div id="kilErrorupdate" style="color: red;"></div>
          </div>

          <div class="form-group" style="text-align: left;">
              <label>Overall Rating</label>
              <input type="number" name="overall_rating" class="form-control" id="emailInput" placeholder="Overall Rating" value="${rating.overall_rating}"  required>
              <div id="kilErrorupdate" style="color: red;"></div>
          </div>

          <div class="form-group" style="text-align: left;">
              <label>Review</label>
              <input type="text" name="review" class="form-control" id="emailInput" placeholder="Review" value="${rating.review}"  required>
              <div id="kilErrorupdate" style="color: red;"></div>
          </div>

          <div style="display: flex; justify-content: space-between;">
              <button type="button" class="btn btn-secondary" onclick="Swal.close()">Cancel</button>
              <button type="submit" onclick="validateForm('#kileditfrom')" class="btn btn-success">Update</button>
          </div>
      </form>
  `;

   // Open SweetAlert with the form
   Swal.fire({
        title: `<span style="font-size: 16px;">Update Rating : ${rating.rating_id}</span>`,
        html: htmlForm,
        showConfirmButton: false, // Disable default SweetAlert buttons, use form's submit buttons instead
        focusCancel: true,
        customClass: {
            popup: 'my-popup-class' // Add a custom class for the popup
        },
        allowOutsideClick: false, // Disable closing by clicking outside
        didOpen: () => {
            // Now initialize intlTelInput when the modal has fully opened
            var input = document.querySelector("#kilvishcontact");
            var savedCountryCode = user.country_code || '';  // Use saved country code from user data
            var savedPhoneNumber = user.contact || '';  // Use saved phone number from user data

            var iti = window.intlTelInput(input, {
                preferredCountries: ["hk", "cn"], // Customize based on your needs
                separateDialCode: true,
                initialCountry: "auto",
                geoIpLookup: function(success, failure) {
                    fetch('https://ipinfo.io/json', {cache: 'reload'}).then(resp => resp.json()).then(resp => {
                        var countryCode = (resp && resp.country) ? resp.country : "hk";
                        success(countryCode);
                    }).catch(() => success("hk"));
                },
                utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.min.js", // Utility script
            });

            if (savedCountryCode && savedPhoneNumber) {
                // Combine country code and phone number if available
                iti.setNumber(savedCountryCode + savedPhoneNumber);
            }

            // Update hidden input field with full phone number
            input.addEventListener("input", function() {
                var fullPhoneNumber = iti.getNumber();
                var countryCode = '+' + iti.getSelectedCountryData().dialCode;
                document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
                document.querySelector("#country_code").value = countryCode;
            });

            input.addEventListener("countrychange", function() {
                var fullPhoneNumber = iti.getNumber();
                var countryCode = '+' + iti.getSelectedCountryData().dialCode;
                document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
                document.querySelector("#country_code").value = countryCode;
            });

            // Initialize hidden field with the current value on page load
            var fullPhoneNumber = iti.getNumber();
            var countryCode = '+' + iti.getSelectedCountryData().dialCode;
            document.querySelector("#fullkilvishcontact").value = fullPhoneNumber;
            document.querySelector("#country_code").value = countryCode;
        }
    });

    // Add real-time validation for inputs (reuse the existing validation)
    addRealTimeValidation('#kileditfrom'); // Ensure real-time validation works with the new modal form
}
</script>

 <!-- /Edit Details Modal -->

 
 <%- include ("superfooter.ejs") %>

 
<script>

  document.addEventListener("DOMContentLoaded", function() {
              document.cookie = 'rental_msg'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';
              document.cookie = 'rental_msg'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
              document.cookie = 'rental_type_id'+'=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
         
      });
  
  
    //-------------- Comman Kilvish Function for input validation start ---------------------
  
       
     
    function validateRequiredFields(kil) {
  
  const form = document.querySelector(`${kil}`); 
  const inputs = form.querySelectorAll('input[required], select[required], textarea[required]'); // Get only required inputs
  let isValid = true;
  
  
  
  // Remove previous error messages and borders
  form.querySelectorAll('.error-message').forEach(errorMsg => errorMsg.remove());
  inputs.forEach(input => {
      input.style.border = ''; // Reset borders
  });
  
  inputs.forEach(input => {
      if (!input.value.trim()) {  // If the required field is empty
          isValid = false;
          input.style.border = '1px solid red'; // Set border to red for empty required fields
          addErrorMessage(input.parentNode, "This Field is Required."); // Add error message
      }
  });
  
  return isValid;
  }
  
  // Add real-time validation for each required field
  function addRealTimeValidation(kil) {
  const form = document.querySelector(`${kil}`); 
  const inputs = form.querySelectorAll('input[required], select[required], textarea[required]');
  
  inputs.forEach(input => {
   // Listen for 'input' and 'change' events on required fields
   input.addEventListener('input', function () {
       if (input.value.trim()) {
           // If the input is filled, remove red border and error message
           input.style.border = '';
           const errorMessage = input.parentNode.querySelector('.error-message');
           if (errorMessage) {
               errorMessage.remove();
           }
       }
   });
   input.addEventListener('change', function () {
       if (input.value.trim()) {
           // For select fields, check if an option is selected
           input.style.border = '';
           const errorMessage = input.parentNode.querySelector('.error-message');
           if (errorMessage) {
               errorMessage.remove();
           }
       }
   });
  });
  }
  
  
  
  
  // Combined validation function
  function validateForm(kil) {
  
  if(!validateRequiredFields(kil)){
    event.preventDefault();
  }
  }
  
  // Add real-time validation once the document is loaded
  document.addEventListener('DOMContentLoaded', () => {
  addRealTimeValidation('#kilfrom');  // Activate real-time validation
  });
  
  
  
  
  function validateKilvishInput(event) {
      const inputField = event.target;
  
      // General valid character sets
      // let validCharacters = /^[a-zA-Z0-9@,._\s-]*$/;
  
      let validCharacters = /^[a-zA-Z\s]*$/; // only char, no special char no numbers 
  
      // Define allowed image file types
      const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/tiff', 'image/webp', 'image/svg+xml'];
  
      // Use parentNode for regular inputs, container for checkboxes
      const container = inputField.closest('.col-lg-12') || inputField.closest('.form-group') || inputField.closest('div');
      const inputParent = inputField.parentNode;
  
      // Remove previous error message and border
      let errorMessage = inputParent.querySelector('.error-message');
      if (errorMessage) errorMessage.remove();
      inputField.style.border = ''; // Reset border
  
      // Custom validations based on input name
      if (inputField.name === 'description') {
          validCharacters = /^[a-zA-Z0-9@,._\s-'"*]*$/;
  
          // Check length limit
          if (inputField.value.length > 400) {
              addErrorMessage(inputParent, 'Input exceeds the maximum length of 400 characters!');
              inputField.style.border = '1px solid red';
              inputField.value = inputField.value.substring(0, 400); // Truncate the input
              return;
          }
      } else if (inputField.name === 'contact' || inputField.name === 'contact') {
          // Only numbers allowed, between 7 and 10 digits
          validCharacters = /^\d{7,10}$/;
      }else if (inputField.name === 'age') {
          // Only numbers allowed, between 7 and 10 digits
          validCharacters = /^\d{2,2}$/;
            // Custom validation: Ensure age is 18 or above
                if (inputField.value && parseInt(inputField.value) < 18 && event.type === 'change') {
                    addErrorMessage(inputParent, 'Age must be 18 or above!');
                    inputField.style.border = '1px solid red';
                    inputField.value = ''; // Clear the input field if age is below 18
                    return;
                }else if(inputField.value && parseInt(inputField.value) < 18 ){
                  addErrorMessage(inputParent, 'Age must be 18 or above!');
                    inputField.style.border = '1px solid red';                 
  
                }
              }else if (inputField.name === 'job_exp') {
                 // Only numbers allowed, between 7 and 10 digits
                 validCharacters = /^\d{1,2}$/;
              }else if(inputField.type ==='email'){
                 validCharacters = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/; // Basic email pattern
              }else if(inputField.type ==='password'){
  
                              const hasSequentialChars = (password) => {
                                   console.log("passworddddddd -", password)
                                   const length = password.length;
                                   
                                   // Check for ascending sequences (e.g., "123", "abc")
                                   for (let i = 0; i < length - 3; i++) {
                                      if (password.charCodeAt(i + 1) === password.charCodeAt(i) + 1 &&
                                            password.charCodeAt(i + 2) === password.charCodeAt(i) + 2 &&
                                            password.charCodeAt(i + 3) === password.charCodeAt(i) + 3) {
                                            return true; // Ascending sequence found
                                      }
                                   }
  
                                   // Check for descending sequences (e.g., "321", "cba")
                                   for (let i = 0; i < length - 3; i++) {
                                      if (password.charCodeAt(i + 1) === password.charCodeAt(i) - 1 &&
                                            password.charCodeAt(i + 2) === password.charCodeAt(i) - 2 &&
                                            password.charCodeAt(i + 3) === password.charCodeAt(i) - 3) {
                                            return true; // Descending sequence found
                                      }
                                   }
                                   
                                   return false; // No sequential characters
                                };
  
                 
  
                 validCharacters = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{12,}$/;
  
  
                                            // Check if password meets the required pattern
                             if (!validCharacters.test(inputField.value)) {
                                addErrorMessage(inputParent, 'Password must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one special character, and one number.');
                                inputField.style.border = '1px solid red';
                                if (event.type === 'change') {   inputField.value = '';  }
                                return; // Stop further validation
                             }
  
                             // Check for sequential characters
                             if (hasSequentialChars(inputField.value)) {
                                addErrorMessage(inputParent, 'Password should not contain sequential characters.');
                                inputField.style.border = '1px solid red';
                                   if (event.type === 'change') {   inputField.value = '';  }
                                return; // Stop further validation
                             }
  
  
                             // Function to check for sequential characters in the password
                  
              }
                
      // Handle file input validation
      if (inputField.type === 'file') {
          const file = inputField.files[0];
          if (file && !validImageTypes.includes(file.type)) {
              addErrorMessage(inputParent, 'Please select a valid image file (JPEG, PNG, etc.)');
              inputField.value = ''; // Clear the file input field
              inputField.style.border = '1px solid red';
              return;
          }
      } else {
          // For normal text/number input validation
          if (event.type === 'keyup') {
              if (!validCharacters.test(inputField.value)) {
                  addErrorMessage(inputParent, 'Invalid character entered!');
                  inputField.style.border = '1px solid red';
                  
              }
          }
  
          if (event.type === 'change') {
              if (!validCharacters.test(inputField.value)) {
                  // On invalid input during change event, clear the field and show an error
                  inputField.value = ''; // Clear invalid input
                  addErrorMessage(inputParent, 'Invalid character or format!');
                  inputField.style.border = '1px solid red';
              } else {
                  // Clear error when value is corrected
                  inputField.style.border = '';
                  if (errorMessage) errorMessage.remove();
              }
          }
      }
  }
  
  // Function to display error messages under the input field or container for checkboxes
  function addErrorMessage(parent, message) {
      if (!parent.querySelector('.error-message')) {
          const errorMessage = document.createElement('div');
          errorMessage.className = 'error-message';
          errorMessage.style.color = 'red';
          errorMessage.style.fontSize = '12px';
          errorMessage.innerText = message;
          parent.appendChild(errorMessage);
      }
  }
  //-------------- Comman Kilvish Function for input validation End ---------------------
  </script>